h1. Setup of an Elexis IT infrastructure using salt

h2. Installation and initil setup

h3. Using virtual machines, eg. for testing

There is Vagrantfile which defines to VM, one called prxserver and another labor. The prxserver

* @vagrant init@

The call @vagrant ssh prxserver@ and @vagrant ssh labor@ respectively to ssh into the VM and continue with the setup for real machines.

h3. Using real machines

* Client (Either Debian wheezy or Ubuntu precise)
** get @install_client.sh@, eg. by calling @wget https://raw.githubusercontent.com/ngiger/salt-elexis/master/scripts/bootstrap_client.sh@ and execute it to install salt-minion.

Set the /etc/salt/minion to something like

bc. master: 192.168.1.222 # IP address or name, default is salt
state_output: mixed


* Server (We assume debian jessie). Here we install salt-master and salt-minion to be able to configure the server, too.
** Call @git clone URL /srv/salt@
** execute @/srv/salt/scripts/install_master.sh@ it to install salt-master and salt-minion

We want to be able to configure the salt server, too, therefore the /etc/salt/minion to something 

bc. master: localhost
state_output: mixed

and the /etc/salt/master to something like this (which will allow you to override the defaults)

bc. file_roots:
  base:
    - /home/some_user/salt
    - /srv/salt/saltstack/salt
pillar_roots:
  base:
    - /etc/salt/pillar

Also I recommond to add a top.sls in /home/some_user/salt with a content like this, which should reflect your environment.

bc. base:
  'ubuntu*':
    - common
    - homes.mount
    - elexis
    - unity
    - server.idmap
    - locale
    - hin-client
  "{{ pillar['server.name']}}*":
    - common
    - server.unattended_upgrades
    - server.nfs
    - server.db

It might be a good idea each part seperatley (first on the server, then on the clients) using e.g. @sudo salt-call state.apply common Test=true@.
This will list

h3. Adding and verifying minion keys on the master

* In the output @sudo salt-key -L@ you should  see a line like @Unaccepted Keys:@ followed @labor.local@
* Run @sudo salt-key -A@ and accept the keys
* Run @sudo salt '*' test.ping@ to verify that you can
* Run @sudo salt-call pillar.items @ to see all variables of your configuration
* @sudo salt-call state.highstate@ # will take a long time to download/install all stuff. It must be called first on the master to prepare all the needed stuff like NFS4-server for the clients
* @sudo salt '*' state.highstate@ # will take a long time to download/install all stuff

h3. NFSv4 setup

This was a little bit tricky. Solved by:
* Installing rpcbind
* Add /etc/idmapd.conf
* Server must be configured via salt before the client minions

h3. Aufsetzen des HIN-Clients

Vorgängig muss aus einem Windows oder Mac der Zugang zum HIN konfiguriert werden, da HIN leider Linux nur halbwegs unterstützt.

Im Moment muss der HIN-Client noch von Hand gestartet werden. Dazu /usr/local/bin/restart_<HIN login>_hin_client aufrufen. Sollte man bei Gelegenheit als Service oder Desktop verpacken.

h3. Unresolved problems

* Running @locale-gen de_CH.UTF-8@ in locales.sls freezes the whole system. Must call this command by hand. Why?
* Don't know how to tell salt that installing the package unattended-upgrades creates 50unattended-upgrade

h3. Available features

* NFSv4 server/client
* Setup of user homes
* Installation of Elexis3 OpenSource. Creates Desktop icons
* Installation of MedElexis. License File and ZIP must reside on server. Creates Desktop icons.
* hinclient with setup of a corresponding thunderbird mail configuration
* ssmtp


h3. TODO

* Set default keyboard to Swiss German
* Don't ask for upgrade of Ubuntu from 12.04 -> 14.04
* Don't show users like vagrant; Ubuntu # It is enough to change them to user ids < 1000
* db backup
* dnsmask https://github.com/saltstack-formulas/dnsmasq-formula
* wol (WakeOnLan)
* rsnapshot https://github.com/Arkanosis/Arkonf/tree/master/saltstack/salt/backup
* https://github.com/elexis/elexis-cockpit
* mysql
* dyndns
* mediport plugin & MPCcommunicator
* nginx https://www.digitalocean.com/community/tutorials/saltstack-infrastructure-creating-salt-states-for-nginx-web-servers and https://github.com/saltstack-formulas/nginx-formula
* exim4/imap/courier mail
* hylafax ???? (FAX will be phased out by swisscom on January, 1, 2017)
* letsencrypt
** https://github.com/saltstack-formulas/letsencrypt-formula
** https://www.kunxi.org/blog/2015/12/lets-encrypt-with-saltstack/

h3. Interesting readings/links/snippet

To develop/debug use (on the minion) @salt-call -l debug state.apply@

https://docs.saltstack.com/en/latest/topics/tutorials/walkthrough.html
salt '*' cmd.run 'ls -l /etc'

See "Managing your computers with a Salt Master and Git":http://talks.caktusgroup.com/lightning-talks/2013/salt-master/

Targeting https://docs.saltstack.com/en/develop/topics/targeting/index.html

Salt allows for minions to be targeted based on a wide range of criteria. The default targeting system uses globular expressions to match minions, hence if there are minions named larry1, larry2, curly1, and curly2, a glob of larry* will match larry1 and larry2, and a glob of *1 will match larry1 and curly1.

Many other targeting systems can be used other than globs, these systems include:
Grains
Pillar
IP Target based on IP address/subnet/range

bc. sudo salt '*' saltutil.refresh_pillar
sudo salt '*' pillar.items
sudo salt labor* state.apply users Test=true -l debug


h4. working with "environments":https://developer.rackspace.com/blog/marconi-and-salt-part-2/

bc. sudo salt prxserver.local grains.setval environment prod
sudo /etc/init.d/salt-master restart
sudo salt prxserver.local grains.items

